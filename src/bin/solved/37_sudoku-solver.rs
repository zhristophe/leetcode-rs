/*
 * @lc app=leetcode.cn id=37 lang=rust
 * @lcpr version=30204
 *
 * [37] 解数独
 */

use leetcode_rs::vec2d;

// @lcpr-template-start
struct Solution;
fn main() {
    let mut board = vec2d![
        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
        ['.', '.', '.', '.', '8', '.', '.', '7', '9']
    ];
    Solution::solve_sudoku(&mut board);
    assert_eq!(
        board,
        vec2d![
            ['5', '3', '4', '6', '7', '8', '9', '1', '2'],
            ['6', '7', '2', '1', '9', '5', '3', '4', '8'],
            ['1', '9', '8', '3', '4', '2', '5', '6', '7'],
            ['8', '5', '9', '7', '6', '1', '4', '2', '3'],
            ['4', '2', '6', '8', '5', '3', '7', '9', '1'],
            ['7', '1', '3', '9', '2', '4', '8', '5', '6'],
            ['9', '6', '1', '5', '3', '7', '2', '8', '4'],
            ['2', '8', '7', '4', '1', '9', '6', '3', '5'],
            ['3', '4', '5', '2', '8', '6', '1', '7', '9']
        ]
    );
}
// @lcpr-template-end
// @lc code=start
impl Solution {
    pub fn solve_sudoku(board: &mut Vec<Vec<char>>) {
        let mut map = board
            .iter()
            .map(|row| {
                row.iter()
                    .map(|c| (c.to_digit(10).unwrap_or(0)) as u8)
                    .collect()
            })
            .collect();
        fn search(map: &mut Vec<Vec<u8>>, pos: usize) -> bool {
            if pos == 81 {
                return true;
            }
            let (i, j) = (pos / 9, pos % 9);
            if map[i][j] != 0 {
                return search(map, pos + 1);
            }
            let mut r = 0;
            for k in 0..9 {
                r |= 1 << map[i][k] as u32;
                r |= 1 << map[k][j] as u32;
                r |= 1 << map[i / 3 * 3 + k / 3][j / 3 * 3 + k % 3] as u32;
            }
            for v in 1..=9 {
                if r & 1 << v != 0 {
                    continue;
                }
                map[i][j] = v;
                // dbg!(i, j, v);
                if search(map, pos + 1) {
                    return true;
                }
                map[i][j] = 0;
            }

            false
        }
        search(&mut map, 0);

        for i in 0..9 {
            for j in 0..9 {
                board[i][j] = (map[i][j] + b'0') as char;
            }
        }
    }
}
// @lc code=end

/*
// @lcpr case=start
// [['5','3','.','.','7','.','.','.','.'],['6','.','.','1','9','5','.','.','.'],['.','9','8','.','.','.','.','6','.'],['8','.','.','.','6','.','.','.','3'],['4','.','.','8','.','3','.','.','1'],['7','.','.','.','2','.','.','.','6'],['.','6','.','.','.','.','2','8','.'],['.','.','.','4','1','9','.','.','5'],['.','.','.','.','8','.','.','7','9']]\n
// @lcpr case=end

 */
